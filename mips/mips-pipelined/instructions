# R-format

instr   func    syntax          description

add     0x20    rd, rs, rt
and     0x24    rd, rs, rt
balrn   23      rs, rd          if [z]=0, branch and link to rs, store return in rd (31 by default)
balrz   22      rs, rd          if [z]=1, ---^---
brn     21      rs              if [z]=0, branch to rs
brz     20      rs              if [z]=1, branch to rs
jalr    9       rs, rd          unconditional jump and link
jr      8       rs              unconditional jump
nor     0x27    rd, rs, rt
or      0x25    rd, rs, rt
slt     0x2a    rd, rs, rt      set rd to (rs < rt)
sub     0x22    rd, rs, rt      rd = rs - rt


# I-format

instr   opcode  syntax          description

addi    0x8     rt, rs, imm     rt = rs + imm
andi    0xC     rt, rs, imm     rt = rs & zeroext(imm)
balmn   23      rt, imm(rs)     if [z]=0, branches to address in memory and links to rt(31)
balmz   22      rt, imm(rs)     if [z]=1, ---^---
beq     0x4     rs, rt, offset  if rs=rt, branch to offset
beqal   44      rs, rt, offset  if rs=rt, branch to offset and link 31
bmn     21      imm(rs)         if [z]=0, branch to address in memory
bmz     20      imm(rs)         if [z]=1, branch to address in memory
bne     0x5     rs, rt, offset  if rs!=rt, branch to offset
bneal   45      rs, rt, offset  if rs!=rt, branch to offset and link 31
jalm    19      rt, imm(rs)     jump to address in memory and link to rt(31)
jalpc   31      rt, offset      jump to pc-relative address, and link to rt(31)
jm      18      imm(rs)         jump to address in memory
jpc     30      offset          jump to pc-relative address
lw      0x23    rt, imm(rs)     load word at rs+imm into rt
ori     0xD     rt, rs, imm     rt = rs | zeroext(imm)
sw      0x2B    rt, imm(rs)     store word in rt into memory at rs+imm


# J-format

baln    27      target26        if [z]=0, branch to target and link 31
balz    26      target26        if [z]=1, branch to target and link 31
bn      25      target26        if [z]=0, branch to target
bz      24      target26        if [z]=1, branch to target
jal     0x3     target26        jump and link 31
j       0x2     target26        jump
